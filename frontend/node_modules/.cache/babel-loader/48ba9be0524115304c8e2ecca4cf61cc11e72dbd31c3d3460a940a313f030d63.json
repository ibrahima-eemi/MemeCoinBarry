{"ast":null,"code":"var _jsxFileName = \"/home/barry/Documents/Blockchain/Memecoin_With_BlackBoxAi/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport MemeList from './components/MemeList';\nimport Form from './components/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [memes, setMemes] = useState([]);\n  useEffect(() => {\n    fetch('http://localhost:3001/api/memes').then(response => response.json()).then(data => setMemes(Array.isArray(data) ? data : [])).catch(error => console.error('Error fetching memes:', error));\n  }, []);\n  const addMeme = formData => {\n    fetch('http://localhost:3001/api/memes', {\n      method: 'POST',\n      body: formData\n    }).then(response => response.json()).then(newMeme => {\n      if (newMeme && newMeme._id) {\n        setMemes([...memes, newMeme]);\n      }\n    }).catch(error => console.error('Error adding meme:', error));\n  };\n  const removeMeme = id => {\n    fetch(`http://localhost:3001/api/memes/${id}`, {\n      method: 'DELETE'\n    }).then(() => setMemes(memes.filter(meme => meme._id !== id))).catch(error => console.error('Error deleting meme:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addMeme: addMeme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MemeList, {\n      memes: memes,\n      removeMeme: removeMeme\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"5gdHCcF3c1u3tVEy6qXr88dpXdk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","MemeList","Form","jsxDEV","_jsxDEV","App","_s","memes","setMemes","fetch","then","response","json","data","Array","isArray","catch","error","console","addMeme","formData","method","body","newMeme","_id","removeMeme","id","filter","meme","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/barry/Documents/Blockchain/Memecoin_With_BlackBoxAi/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport MemeList from './components/MemeList';\nimport Form from './components/Form';\n\nfunction App() {\n    const [memes, setMemes] = useState([]);\n\n    useEffect(() => {\n        fetch('http://localhost:3001/api/memes')\n            .then(response => response.json())\n            .then(data => setMemes(Array.isArray(data) ? data : []))\n            .catch(error => console.error('Error fetching memes:', error));\n    }, []);\n\n    const addMeme = (formData) => {\n        fetch('http://localhost:3001/api/memes', {\n            method: 'POST',\n            body: formData,\n        })\n            .then(response => response.json())\n            .then(newMeme => {\n                if (newMeme && newMeme._id) {\n                    setMemes([...memes, newMeme]);\n                }\n            })\n            .catch(error => console.error('Error adding meme:', error));\n    };\n\n    const removeMeme = (id) => {\n        fetch(`http://localhost:3001/api/memes/${id}`, {\n            method: 'DELETE',\n        })\n        .then(() => setMemes(memes.filter(meme => meme._id !== id)))\n        .catch(error => console.error('Error deleting meme:', error));\n    };\n\n    return (\n        <div className=\"App\">\n            <Header />\n            <Form addMeme={addMeme} />\n            <MemeList memes={memes} removeMeme={removeMeme} />\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,IAAI,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZU,KAAK,CAAC,iCAAiC,CAAC,CACnCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIL,QAAQ,CAACM,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,GAAGA,IAAI,GAAG,EAAE,CAAC,CAAC,CACvDG,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;EACtE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,OAAO,GAAIC,QAAQ,IAAK;IAC1BX,KAAK,CAAC,iCAAiC,EAAE;MACrCY,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEF;IACV,CAAC,CAAC,CACGV,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACa,OAAO,IAAI;MACb,IAAIA,OAAO,IAAIA,OAAO,CAACC,GAAG,EAAE;QACxBhB,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEgB,OAAO,CAAC,CAAC;MACjC;IACJ,CAAC,CAAC,CACDP,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC,CAAC;EACnE,CAAC;EAED,MAAMQ,UAAU,GAAIC,EAAE,IAAK;IACvBjB,KAAK,CAAC,mCAAmCiB,EAAE,EAAE,EAAE;MAC3CL,MAAM,EAAE;IACZ,CAAC,CAAC,CACDX,IAAI,CAAC,MAAMF,QAAQ,CAACD,KAAK,CAACoB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACJ,GAAG,KAAKE,EAAE,CAAC,CAAC,CAAC,CAC3DV,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACjE,CAAC;EAED,oBACIb,OAAA;IAAKyB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChB1B,OAAA,CAACJ,MAAM;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV9B,OAAA,CAACF,IAAI;MAACiB,OAAO,EAAEA;IAAQ;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC1B9B,OAAA,CAACH,QAAQ;MAACM,KAAK,EAAEA,KAAM;MAACkB,UAAU,EAAEA;IAAW;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEd;AAAC5B,EAAA,CAvCQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AAyCZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}